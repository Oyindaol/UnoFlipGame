Index: src/UNOModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\n\n/**\n * The UNOModel class.\n * Model part of the implementation of the MVC pattern.\n *\n * @author Osas Iyamu\n * @author Oyindamola Taiwo-Olupeka\n */\npublic class UNOModel implements Serializable {\n\n    enum mode {LIGHT, DARK}\n    private mode currentMode;\n    private ArrayList<Player> players;\n    private int position;\n    private HashMap<Player, Integer> scores;\n    private HashMap<String, Integer> scoreGuide;\n    private ArrayList<Card> cardDeck;\n    private ArrayList<Card> playingDeck;\n    private Player currentPlayer;\n    private boolean clockwise;\n\n    public List<UNOView> getViews() {\n        return views;\n    }\n\n    private List<UNOView> views;\n\n    private Card topCard;\n    private boolean winner;\n    private Stack<GameState> undoStack;\n    private Stack<GameState> redoStack;\n\n    /**\n     * Constructor for the UNOModel (Model) class\n     * Initializes the game\n     */\n    public UNOModel(){\n        this.players = new ArrayList<>();\n        this.scores = new HashMap<Player, Integer>();\n        this.scoreGuide = new HashMap<>();\n        this.cardDeck = new ArrayList<>();\n        this.playingDeck = new ArrayList<>();\n        this.currentPlayer = null;\n        this.position = 0;\n        this.clockwise = true;\n        this.currentMode = mode.LIGHT;\n        this.views = new ArrayList<>();\n        this.undoStack = new Stack<>();\n        this.redoStack = new Stack<>();\n\n        this.scoreGuide.put(\"1\", 1);\n        this.scoreGuide.put(\"2\", 2);\n        this.scoreGuide.put(\"3\", 3);\n        this.scoreGuide.put(\"4\", 4);\n        this.scoreGuide.put(\"5\", 5);\n        this.scoreGuide.put(\"6\", 6);\n        this.scoreGuide.put(\"7\", 7);\n        this.scoreGuide.put(\"8\", 8);\n        this.scoreGuide.put(\"9\", 9);\n        this.scoreGuide.put(\"SKIP\", 20);\n        this.scoreGuide.put(\"FLIP\", 20);\n        this.scoreGuide.put(\"REVERSE\", 20);\n        this.scoreGuide.put(\"WILD_DRAW_TWO\", 50);\n        this.scoreGuide.put(\"WILD\", 60);\n\n    }\n\n    /**\n     * A method to initialize the card deck\n     */\n    public void init() {\n        //Initialize card deck\n        Random rand = new Random();\n\n        //Initialize the number cards\n        for (int i = 0; i < 72; i++) {\n            int lightInt = rand.nextInt(9) + 1;\n            int lightColor = rand.nextInt(4);\n            int darkInt = rand.nextInt(9) + 1;\n            int darkColour = rand.nextInt(4);\n\n            cardDeck.add(new NumberCard(Card.type.REGULAR, lightInt, Colors.LIGHTCOLORS.values()[lightColor], darkInt, Colors.DARKCOLORS.values()[darkColour]));\n        }\n\n        //Initialize the special cards\n        for (int i = 0; i < 12; i++) {\n            SpecialCard skip = new SpecialCard(Card.type.SPECIAL, Card.SPECIALCARDS.SKIP, Colors.LIGHTCOLORS.values()[rand.nextInt(4)], Card.SPECIALCARDS.WILD, Colors.DARKCOLORS.values()[rand.nextInt(4)]);\n            SpecialCard wild_draw_two = new SpecialCard(Card.type.SPECIAL, Card.SPECIALCARDS.WILD_DRAW_TWO, Colors.LIGHTCOLORS.values()[rand.nextInt(4)], Card.SPECIALCARDS.FLIP, Colors.DARKCOLORS.values()[rand.nextInt(4)]);\n            SpecialCard reverse = new SpecialCard(Card.type.SPECIAL, Card.SPECIALCARDS.REVERSE, Colors.LIGHTCOLORS.values()[rand.nextInt(4)], Card.SPECIALCARDS.REVERSE, Colors.DARKCOLORS.values()[rand.nextInt(4)]);\n            SpecialCard wild = new SpecialCard(Card.type.SPECIAL, Card.SPECIALCARDS.WILD, Colors.LIGHTCOLORS.UNASSIGNED, Card.SPECIALCARDS.WILD, Colors.DARKCOLORS.UNASSIGNED);\n            SpecialCard flip = new SpecialCard(Card.type.SPECIAL, Card.SPECIALCARDS.FLIP, Colors.LIGHTCOLORS.values()[rand.nextInt(4)], Card.SPECIALCARDS.FLIP, Colors.DARKCOLORS.values()[rand.nextInt(4)]);\n\n            cardDeck.add(reverse);\n            cardDeck.add(wild_draw_two);\n            cardDeck.add(skip);\n            cardDeck.add(wild);\n            cardDeck.add(flip);\n        }\n\n        Collections.shuffle(cardDeck);\n\n        //Initialize the scores\n        for (Player p : players){\n            scores.put(p, 0);\n        }\n        distributeToAll(7);\n        playingDeck.add(cardDeck.get(cardDeck.size()-1));\n        topCard = playingDeck.get(playingDeck.size()-1);\n\n        //Ensure that the top card isn't a wild card\n        while(topCard.getLightCharacteristics().split(\" \")[0].equals(\"WILD\")){\n            Collections.shuffle(cardDeck);\n            topCard = playingDeck.get(playingDeck.size()-1);\n        }\n        cardDeck.remove(cardDeck.get(cardDeck.size()-1));\n\n    }\n\n    /**\n     * A method to get all the players in the game\n     * @return players in the game\n     */\n    public ArrayList<Player> getPlayers() {\n        return this.players;\n    }\n\n\n    /**\n     * Adds a view from the Uno game\n     * @param v, the view\n     */\n    public void addUNOView(UNOView v) {\n        views.add(v);\n    }\n\n    /**\n     * Removes a view from the Uno game\n     * @param v, the view\n     */\n    public void removeUNOView(UNOView v) {\n        views.remove(v);\n    }\n\n    /**\n     * A method to add player to the player list\n     * @param p the player to add\n     */\n    public void addPlayer(Player p) {\n        this.players.add(p);\n    }\n\n    /**\n     * A method to get the top cad of the deck\n     * @return the top card of the playing deck\n     */\n    public Card getTopCard() {\n        return topCard;\n    }\n\n    /**\n     * Return true if there's a winner\n     * @return boolean, isWinner?\n     */\n    public boolean isWinner() {\n        return winner;\n    }\n\n    /**\n     * A method to remove a player from the list\n     * @param p, the player to remove\n     */\n    public void removePlayer(Player p){\n        this.players.remove(p);\n    }\n\n    /**\n     * A method to get the card deck\n     * @return the card deck\n     */\n    public ArrayList<Card> getCardDeck() {\n        return cardDeck;\n    }\n\n    /**\n     * A method to add a card to the card deck\n     * @param card, the card to add\n     */\n    public void addToDeck(NumberCard card) {\n        cardDeck.add(card);\n    }\n\n    /**\n     * A method to remove from the card deck\n     * @param card, the card to remove\n     */\n    public void removeFromDeck(NumberCard card) {\n        this.cardDeck.remove(card);\n    }\n\n    /**\n     * A method to get the scores\n     * @return the list of scores\n     */\n    public HashMap<Player, Integer> getScores() {\n        return scores;\n    }\n\n    /**\n     * A method to get the playing deck\n     * @return the playing deck\n     */\n    public ArrayList<Card> getPlayingDeck() {\n        return playingDeck;\n    }\n\n    /**\n     * A method to set the current player\n     * @param p, the player to set\n     */\n    public void setCurrentPlayer(Player p) {\n        this.currentPlayer = p;\n    }\n\n    /**\n     * A method to get the current player\n     * @return the current player\n     */\n    public Player getCurrentPlayer() {\n        return currentPlayer;\n    }\n\n    /**\n     * A method to get the mode of the game\n     * @return the mode of the game\n     */\n    public mode getCurrentMode() {\n        return currentMode;\n    }\n\n    /**\n     * A method to distribute cards to everyone\n     * @param numberOfCards number of cards to distribute\n     */\n    private void distributeToAll(int numberOfCards){\n        for (Player p : players){\n            for (int i=0; i<numberOfCards; i++){\n                int lastCardInDeck = cardDeck.size()-1;\n                p.addCard(cardDeck.get(lastCardInDeck));\n                cardDeck.remove(cardDeck.get(lastCardInDeck));\n            }\n        }\n    }\n\n    /** A method to update the score of each player\n     * @param player the current player\n     * @param score the score to add\n     */\n    public void updateScore(Player player, int score){\n        if(!(scores.containsKey(player))){\n            scores.put(player, score);\n        }else{\n            scores.replace(player, scores.get(player)+score);\n        }\n    }\n\n    /**\n     * A method to get a card from the bank\n     */\n    public void drawFromBank(){\n        currentPlayer.getCards().add(cardDeck.get(cardDeck.size() - 1));\n        cardDeck.remove(cardDeck.size() - 1);\n        for (UNOView view : views){\n            view.handleDrawCard(this);\n        }\n        System.out.println(currentPlayer.getName() + \" picked a card\");\n    }\n\n\n    //-------------------For the UI version-------------------//\n\n    /**\n     * A method to draw card\n     */\n    public void drawCard(){\n        currentPlayer.getCards().add(cardDeck.get(cardDeck.size() - 1));\n        cardDeck.remove(cardDeck.size() - 1);\n    }\n\n    /**\n     * A method to change the turns\n     */\n    public void changeTurn(){\n        if(clockwise) {\n            this.position = this.position + 1;\n        } else {\n            this.position = this.position - 1;\n        }\n        this.position = ((this.position%(players.size())) + players.size()) % players.size(); //position of the next player\n        currentPlayer = players.get(position);\n        for (UNOView view : views){\n            view.handleNextPlayer(this);\n        }\n    }\n\n    /**\n     *  A method to check if the card characteristics is special, and if yes, executes a block of code\n     * @param characteristics, the characteristics to be checked\n     */\n    private void checkSpecial(String characteristics){\n        if(currentMode.equals(mode.LIGHT)){\n            if (characteristics.equals(\"SKIP\")) {\n                this.position = (clockwise ? (this.position + 1) : (this.position - 1)) % players.size();\n            } else if (characteristics.equals(\"WILD_DRAW_TWO\")) {\n                for (int i = 0; i < 2; i++) {\n                    players.get(((this.position + 1 % (players.size())) + players.size()) % players.size()).addCard(cardDeck.get(cardDeck.size() - 1));\n                    cardDeck.remove(cardDeck.size() - 1);\n                }\n                this.position = (clockwise ? (this.position + 1) : (this.position - 1)) % players.size();\n            } else if (characteristics.equals(\"REVERSE\")) {\n                this.clockwise = !this.clockwise;\n            } else if (characteristics.equals(\"FLIP\")) {\n                this.currentMode = mode.DARK;\n            }\n        }else {\n            if (characteristics.equals(\"SKIP\")) {\n                this.position = (clockwise ? (this.position + 1) : (this.position - 1)) % players.size();\n            } else if (characteristics.equals(\"WILD_DRAW_TWO\")) {\n                for (int i = 0; i < 2; i++) {\n                    players.get(((this.position + 1 % (players.size())) + players.size()) % players.size()).addCard(cardDeck.get(cardDeck.size() - 1));\n                }\n                this.position = (clockwise ? (this.position + 1) : (this.position - 1)) % players.size();\n            } else if (characteristics.equals(\"REVERSE\")) {\n                this.clockwise = !this.clockwise;\n            } else if (characteristics.equals(\"FLIP\")) {\n                this.currentMode = mode.LIGHT;\n            }\n        }\n    }\n\n    /**\n     * A method to check a wild card and perform the operation based on the result\n     * @param characteristics, the characteristics of the card\n     * @param color, the color\n     */\n    private void checkWild(String characteristics, String color){\n        if(currentMode.equals(mode.LIGHT)) {\n            if (color.equals(\"unassigned\")) {\n                for (int i = 0; i < this.currentPlayer.getCards().size(); i++) {\n                    if (this.currentPlayer.getCards().get(i).getLightCharacteristics().split(\" \")[0].equals(characteristics)) {\n                        undoStack.push(getGameState());\n                        playingDeck.add(this.currentPlayer.getCards().get(i));\n                        currentPlayer.getCards().remove(this.currentPlayer.getCards().get(i));\n                        this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n                        updateScore(currentPlayer, this.scoreGuide.get(characteristics));\n\n                        if (currentPlayer.getCards().isEmpty()) {\n                            winner = true;\n                        }\n                        break;\n                    }\n                }\n                for (UNOView view : views) {\n                    view.handleWildCard(this);\n                }\n                redoStack.push(new GameState(this.playingDeck, this.currentPlayer.getCards(), this.scores, this.topCard, this.currentMode));\n            }\n        }else{\n            if (color.equals(\"unassigned\")) {\n                for (int i = 0; i < this.currentPlayer.getCards().size(); i++) {\n                    if (this.currentPlayer.getCards().get(i).getDarkCharacteristics().split(\" \")[0].equals(characteristics)) {\n                        undoStack.push(getGameState());\n                        playingDeck.add(this.currentPlayer.getCards().get(i));\n                        currentPlayer.getCards().remove(this.currentPlayer.getCards().get(i));\n                        this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n                        updateScore(currentPlayer, this.scoreGuide.get(characteristics));\n\n                        if (currentPlayer.getCards().isEmpty()) {\n                            winner = true;\n                        }\n                        break;\n                    }\n                }\n                for (UNOView view : views) {\n                    view.handleWildCard(this);\n                }\n                redoStack.push(new GameState(this.playingDeck, this.currentPlayer.getCards(), this.scores, this.topCard, this.currentMode));\n            }\n        }\n    }\n\n\n\n    /**\n     * A method to validate the placement of cards\n     * @param characteristics, the characteristics of the card\n     * @param color, the color of the card\n     */\n    public void validatePlacement(String characteristics, String color) throws IOException {\n        if (!undoStack.empty()){\n            undoStack.clear();\n        }\n\n        if (!undoStack.empty()){\n            redoStack.clear();\n        }\n\n        if(currentMode.equals(mode.LIGHT)){\n\n            checkWild(characteristics, color);\n\n            if (characteristics.equals(topCard.getLightCharacteristics().split(\" \")[0]) ||\n                    color.equals(topCard.getLightCharacteristics().split(\" \")[1])) {\n\n                checkSpecial(characteristics);\n\n                for (int i = 0; i < this.currentPlayer.getCards().size(); i++) {\n                    if (this.currentPlayer.getCards().get(i).getLightCharacteristics().equals(characteristics + \" \" + color)) {\n                        undoStack.push(getGameState());\n                        playingDeck.add(this.currentPlayer.getCards().get(i));\n                        currentPlayer.getCards().remove(this.currentPlayer.getCards().get(i));\n                        this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n                        updateScore(currentPlayer, this.scoreGuide.get(characteristics));\n\n                        if (currentPlayer.getCards().isEmpty()) {\n                            winner = true;\n                        }\n                        break;\n                    }\n                }\n                UNOEvent e = new UNOEvent(true, this);\n                for (UNOView views : this.views) {\n                    views.handlePlacement(e);\n                }\n            } else {\n                UNOEvent e = new UNOEvent(false, this);\n                for (UNOView views : views) {\n                    views.handlePlacement(e);\n                }\n            }\n        } else if (currentMode.equals(mode.DARK)) {\n\n            checkWild(characteristics, color);\n            if(characteristics.equals(topCard.getDarkCharacteristics().split(\" \")[0]) ||\n                    color.equals(topCard.getDarkCharacteristics().split(\" \")[1])){\n\n                undoStack.push(getGameState());\n                checkSpecial(characteristics);\n\n                for (int i = 0; i < this.currentPlayer.getCards().size(); i++) {\n                    if (this.currentPlayer.getCards().get(i).getDarkCharacteristics().equals(characteristics + \" \" + color)) {\n                        playingDeck.add(this.currentPlayer.getCards().get(i));\n                        currentPlayer.getCards().remove(this.currentPlayer.getCards().get(i));\n                        this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n                        updateScore(currentPlayer, this.scoreGuide.get(characteristics));\n\n                        if(currentPlayer.getCards().isEmpty()){\n                            winner = true;\n                        }\n                        break;\n                    }\n                }\n                UNOEvent e = new UNOEvent(true, this);\n                for (UNOView views : this.views) {\n                    views.handlePlacement(e);\n                }\n            }\n            else {\n                UNOEvent e = new UNOEvent(false, this);\n                for (UNOView views: views){\n                    views.handlePlacement(e);\n                }\n            }\n        }\n        redoStack.push(new GameState(this.playingDeck, this.currentPlayer.getCards(), this.scores, this.topCard, this.currentMode));\n    }\n\n    private GameState getGameState(){\n        ArrayList<Card> newPlayerCards = new ArrayList<>(this.currentPlayer.getCards());\n        HashMap<Player, Integer> newScores = new HashMap<>(this.scores);\n\n        ArrayList<Card> newPlayingDeck = new ArrayList<>(this.playingDeck);\n        Card newTopCard = this.topCard;\n        UNOModel.mode mode = this.currentMode;\n\n        return new GameState(newPlayingDeck, newPlayerCards, newScores, newTopCard, mode);\n    }\n    public void implementUndo(){\n        GameState state = undoStack.pop();\n        this.currentMode = state.mode;\n        this.scores = state.scores;\n        this.playingDeck = state.playingDeck;\n        this.currentPlayer.setCards(state.playerCards);\n        this.topCard = state.topCard;\n\n        for(UNOView view : views){\n            view.handleUndo(this);\n        }\n        undoStack.push(state);\n    }\n\n    public void implementRedo(){\n        GameState state = redoStack.pop();\n        this.currentMode = state.mode;\n        this.scores = state.scores;\n        this.playingDeck = state.playingDeck;\n        this.topCard = state.topCard;\n\n        for(UNOView view : views){\n            view.handleRedo(this);\n        }\n        redoStack.push(state);\n    }\n\n    public void resetUndoRedo(){\n        this.cardsForRedo = new ArrayList<>();\n        this.cardsForUndo = new ArrayList<>();\n    }\n\n\n    /**\n     * A method to place AI card\n     * @param card, the card to place\n     */\n    private void placeAICard(Card card){\n        if(currentMode.equals(mode.LIGHT)) {\n            playingDeck.add(card);\n            currentPlayer.getCards().remove(card);\n            this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n            updateScore(currentPlayer, this.scoreGuide.get(card.getLightCharacteristics().split(\" \")[0]));\n        }else{\n            playingDeck.add(card);\n            currentPlayer.getCards().remove(card);\n            this.topCard = this.playingDeck.get(this.playingDeck.size() - 1);\n            updateScore(currentPlayer, this.scoreGuide.get(card.getDarkCharacteristics().split(\" \")[0]));\n        }\n    }\n\n    /**\n     * A method to implement the AI's turn\n     */\n    public void implementAITurn(){\n        int cardSize = currentPlayer.getCards().size();\n        Random rand = new Random();\n        int colorIndex;\n        for(Card card : currentPlayer.getCards()){\n            if(currentMode.equals(mode.LIGHT)){\n                if(card.getLightCharacteristics().split(\" \")[0].equals(topCard.getLightCharacteristics().split(\" \")[0]) ||\n                        card.getLightCharacteristics().split(\" \")[1].equals(topCard.getLightCharacteristics().split(\" \")[1])){\n                    checkSpecial(card.getLightCharacteristics().split(\" \")[0]);\n                    placeAICard(card);\n                    break;\n                }\n                if (card.getLightCharacteristics().split(\" \")[1].equals(\"UNASSIGNED\")) {\n                    colorIndex = rand.nextInt(4);\n                    card.setLightColor(Colors.LIGHTCOLORS.values()[colorIndex]);\n                    placeAICard(card);\n                    break;\n                }\n            } else if(currentMode.equals(mode.DARK)){\n                if(card.getDarkCharacteristics().split(\" \")[0].equals(topCard.getDarkCharacteristics().split(\" \")[0]) ||\n                        card.getDarkCharacteristics().split(\" \")[1].equals(topCard.getDarkCharacteristics().split(\" \")[1])){\n                    checkSpecial(card.getDarkCharacteristics().split(\" \")[0]);\n                    placeAICard(card);\n                    break;\n                }\n                if (card.getDarkCharacteristics().split(\" \")[1].equals(\"UNASSIGNED\")) {\n                    colorIndex = rand.nextInt(4);\n                    card.setDarkColor(Colors.DARKCOLORS.values()[colorIndex]);\n\n                    placeAICard(card);\n                }\n            }\n        }\n\n        if(cardSize == currentPlayer.getCards().size()){\n            drawFromBank();\n        }\n        if(currentPlayer.getCards().isEmpty()){\n            winner = true;\n        }\n        UNOEvent e = new UNOEvent(true, this);\n        for (UNOView views : this.views) {\n            views.handleAITurn(e);\n        }\n\n    }\n\n    /**\n     * A method to initialize the game structure after restart command\n     */\n    public void restartGame(){\n        this.currentMode = mode.LIGHT;\n        this.position = 0;\n        this.scores.clear();\n        this.cardDeck.clear();\n        this.playingDeck.clear();\n        this.currentPlayer = this.getPlayers().get(0);\n        this.clockwise = true;\n\n        for(Player player : getPlayers()){\n            player.getCards().clear();\n        }\n\n        init();\n\n        for (UNOView view : views){\n            view.handleRestart(this);\n        }\n\n\n    }\n\n    public void save(String fileName) throws IOException {\n        FileOutputStream fileOutputStream = new FileOutputStream(fileName + \".txt\");\n        ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);\n        objectOutputStream.writeObject(this);\n        objectOutputStream.flush();\n        objectOutputStream.close();\n\n        for(UNOView view : views){\n            view.handleSaveGame();\n        }\n    }\n\n    public static UNOModel load(String fileName) throws IOException, ClassNotFoundException {\n        FileInputStream fileInputStream = new FileInputStream(fileName + \".txt\");\n        ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);\n        UNOModel unoModel = (UNOModel) objectInputStream.readObject();\n        objectInputStream.close();\n        return unoModel;\n    }\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        UNOModel model = UNOModel.load(\"NewModel\");\n        System.out.println(model.getPlayers());\n        System.out.println(model.currentMode);\n        System.out.println(model.topCard);\n        System.out.println(model.getCurrentPlayer().getCards());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UNOModel.java b/src/UNOModel.java
--- a/src/UNOModel.java	(revision ca326e546d62adf1b6eb381315aa1ee78378e2c8)
+++ b/src/UNOModel.java	(date 1701926214800)
@@ -1,3 +1,4 @@
+import java.io.*;
 import java.util.*;
 
 /**
@@ -512,12 +513,6 @@
         redoStack.push(state);
     }
 
-    public void resetUndoRedo(){
-        this.cardsForRedo = new ArrayList<>();
-        this.cardsForUndo = new ArrayList<>();
-    }
-
-
     /**
      * A method to place AI card
      * @param card, the card to place
Index: src/UNOController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\nimport java.io.IOException;\nimport java.io.Serializable;\n\n/**\n * UNOController class.\n * Controller part of the implementation of the MVC pattern.\n */\npublic class UNOController implements ActionListener, Serializable {\n    private UNOFrame view;\n    private UNOModel model;\n\n    /**\n     * UNOController Constructor.\n     * @param model\n     * @param view\n     */\n    public UNOController(UNOModel model, UNOFrame view) {\n        this.model = model;\n        this.view = view;\n    }\n\n    /**\n     * Action Listeners for the button in the GUI.\n     *\n     * @param e the event to be processed\n     */\n    @Override\n    public void actionPerformed(ActionEvent e) {\n\n        if (e.getActionCommand().equals(\"Next Player\")) {\n            model.changeTurn();\n            model.resetUndoRedo();\n        }\n\n        else if (e.getActionCommand().equals(\"Draw Card\")) {\n            model.drawCard();\n        }\n\n        else if (e.getActionCommand().equals(\"card\")) {\n            JButton button = (JButton) e.getSource();\n            String characteristics = button.getText().split(\" \")[0];\n            if (!characteristics.equals(\"WILD\")) {\n                String color = button.getText().split(\" \")[1];\n                System.out.println(characteristics + \" \" + color);\n                try {\n                    model.validatePlacement(characteristics, color);\n                } catch (IOException ex) {\n                    throw new RuntimeException(ex);\n                }\n            }\n            else {\n                try {\n                    model.validatePlacement(\"WILD\", \"unassigned\");\n                } catch (IOException ex) {\n                    throw new RuntimeException(ex);\n                }\n            }\n        }\n\n        else if (e.getActionCommand().equals(\"Draw From Bank\")) {\n            model.drawFromBank();\n        }\n\n        else if (e.getActionCommand().equals(\"UNO\")) {\n            this.view.handleUNO();\n\n        }\n        else if (e.getActionCommand().equals(\"Play AI\")) {\n            model.implementAITurn();\n        }\n        else if (e.getActionCommand().equals(\"Undo\")) {\n            model.implementUndo();\n        }\n        else if (e.getActionCommand().equals(\"Redo\")){\n            model.implementRedo();\n        }\n        else if (e.getActionCommand().equals(\"Restart\")) {\n            model.restartGame();\n            JOptionPane.showMessageDialog(view,\n                    \"The game has been restarted\",\n                    \"Restart successful\",\n                    JOptionPane.PLAIN_MESSAGE);\n        }\n        else if (e.getActionCommand().equals(\"Save\")) {\n            String fileNameToSave = JOptionPane.showInputDialog(\"Enter file name to save to\");\n            try {\n                model.save(fileNameToSave);\n            } catch (IOException ex) {\n                throw new RuntimeException(ex);\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UNOController.java b/src/UNOController.java
--- a/src/UNOController.java	(revision ca326e546d62adf1b6eb381315aa1ee78378e2c8)
+++ b/src/UNOController.java	(date 1701926232496)
@@ -36,7 +36,6 @@
 
         if (e.getActionCommand().equals("Next Player")) {
             model.changeTurn();
-            model.resetUndoRedo();
         }
 
         else if (e.getActionCommand().equals("Draw Card")) {
@@ -51,14 +50,14 @@
                 System.out.println(characteristics + " " + color);
                 try {
                     model.validatePlacement(characteristics, color);
-                } catch (IOException ex) {
+                } catch (Exception ex) {
                     throw new RuntimeException(ex);
                 }
             }
             else {
                 try {
                     model.validatePlacement("WILD", "unassigned");
-                } catch (IOException ex) {
+                } catch (Exception ex) {
                     throw new RuntimeException(ex);
                 }
             }
@@ -92,7 +91,7 @@
             String fileNameToSave = JOptionPane.showInputDialog("Enter file name to save to");
             try {
                 model.save(fileNameToSave);
-            } catch (IOException ex) {
+            } catch (Exception ex) {
                 throw new RuntimeException(ex);
             }
         }
Index: src/UNOFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport javax.swing.border.Border;\nimport javax.swing.border.EtchedBorder;\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/**\n * UNOFrame Class.\n * GUI representation of the UNO flip game.\n */\npublic class UNOFrame extends JFrame implements UNOView {\n\n    private UNOModel model;\n    private UNOController controller;\n    private JButton nextButton;\n    private JButton drawButton;\n    private JButton UNOButton;\n    private JButton AI_Button;\n    private JButton restart;\n    private JButton undo;\n    private JButton redo;\n    private JButton saveButton;\n    JPanel northPanel;\n    JPanel centerPanel;\n    JPanel eastPanel;\n    JPanel westPanel;\n    JPanel southPanel;\n    JPanel cardsPanel;\n    JScrollPane cardsScrollPane;\n    JLabel currentPlayerInfo;\n    Border raisedEtched = BorderFactory.createEtchedBorder(EtchedBorder.LOWERED);\n\n    /**\n     * Constructor for the UNOFrame\n     * @param model, the model of the game\n     */\n    public UNOFrame(UNOModel model) throws IOException, ClassNotFoundException {\n        super(\"UNO Flip\");\n        this.model = model;\n\n        this.setLayout(new BorderLayout(5, 2));\n        this.northPanel = new JPanel(new FlowLayout());\n        this.centerPanel = new JPanel(new GridBagLayout());\n        this.westPanel = new JPanel(new BorderLayout());\n        this.southPanel = new JPanel(new GridBagLayout());\n        this.eastPanel = new JPanel(new BorderLayout());\n        this.eastPanel.setMaximumSize(new Dimension(30,30));\n\n        cardsPanel = new JPanel(new GridLayout(2, 0));\n        cardsScrollPane = new JScrollPane(cardsPanel, ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);\n        currentPlayerInfo = new JLabel();\n\n        model.addUNOView(this);\n        controller = new UNOController(model, this);\n\n        init();\n\n        this.setMinimumSize(new Dimension(1250, 700));\n        this.pack();\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        this.setLocationRelativeTo(null);\n        this.setVisible(true);\n    }\n\n    /**\n     * A method to initialize the game components.\n     */\n    public void init() throws IOException, ClassNotFoundException {\n        String loadGame = JOptionPane.showInputDialog(\"Would you like to load a previously saved game (type l) or start a new game (any other key)?\");\n        if(loadGame.toLowerCase().equals(\"l\")){\n            String fileName = JOptionPane.showInputDialog(\"What file would you like to load? \");\n            this.model = UNOModel.load(fileName);\n            this.controller = new UNOController(this.model, this);\n            this.model.removeUNOView(this.model.getViews().get(0));\n            this.model.addUNOView(this);\n        }else {\n            setupPlayers();\n            setupAIPlayers();\n            setupGame();\n        }\n        loadSetup();\n        setupButtonsAndPanels();\n    }\n\n    public void loadSetup(){\n        this.updateCurrentPlayerInfo(model.getCurrentPlayer());\n        this.updateTopCard(model);\n\n        this.updateCurrentPlayerCards(model.getCurrentPlayer(), model);\n        southPanel.add(cardsScrollPane);\n        this.pack();\n    }\n\n    /**\n     * A method to set up players in the game.\n     */\n    public void setupPlayers() {\n        //For components that will go into the South Panel\n        int numPlayers = Integer.parseInt(JOptionPane.showInputDialog(\"Enter number of Players (2-12)\"));\n        while (numPlayers < 2 || numPlayers > 12) {\n            numPlayers = Integer.parseInt(JOptionPane.showInputDialog(\"Number not in range. Enter number of Players (2-12)\"));\n        }\n        int count = 1;\n        for (int i = 0; i < numPlayers; i++) {\n            String player = JOptionPane.showInputDialog(\"Enter Player \" + count + \"'s name\");\n            model.addPlayer(new Player(player));\n            count++;\n        }\n    }\n\n    /**\n     * A method to set up AI players in the game.\n     */\n    private void setupAIPlayers() {\n        String AI = JOptionPane.showInputDialog(\"Do you wish to add an AI player? y/n\");\n\n        while (!(AI.toLowerCase().equals(\"y\") || AI.toLowerCase().equals(\"n\"))) {\n            AI = JOptionPane.showInputDialog(\"Incorrect input, try again y/n\");\n        }\n        if(AI.equals(\"y\")) {\n            int numAIPlayers = Integer.valueOf(JOptionPane.showInputDialog(\"How many AI players would you like?\"));\n\n            while((numAIPlayers + model.getPlayers().size()) > 12){\n                numAIPlayers = Integer.valueOf(JOptionPane.showInputDialog(\"Sum of AI players and human players greater than 12, try again\"));\n            }\n            int count = 1;\n            for(int i=0; i<numAIPlayers; i++){\n                model.addPlayer(new AI(count));\n                count++;\n            }\n        }\n    }\n\n    /**\n     * A method to set up the game model.\n     */\n    private void setupGame() {\n        model.init();\n        model.setCurrentPlayer(model.getPlayers().get(0));\n        this.updateCurrentPlayerCards(model.getCurrentPlayer(), model);\n        southPanel.add(cardsScrollPane);\n        this.pack();\n    }\n\n    /**\n     * A method to set up the buttons and panels of the game.\n     */\n    public void setupButtonsAndPanels() {\n        /* GAME BUTTONS */\n\n        // Next player button\n        nextButton = new JButton(\"Next Player\");\n        nextButton.addActionListener(controller);\n        nextButton.setEnabled(false);\n\n        // AI play button\n        AI_Button = new JButton(\"Play AI\");\n        AI_Button.addActionListener(controller);\n        AI_Button.setVisible(false);\n\n        // UNO game button\n        UNOButton = new JButton(\"UNO\");\n        UNOButton.addActionListener(controller);\n        UNOButton.setBackground(Color.GRAY);\n        UNOButton.setEnabled(false); // Disable the button initially\n\n        // Draw card button\n        drawButton = new JButton(\"Draw From Bank\");\n        drawButton.addActionListener(controller);\n\n        //Restart button\n        restart = new JButton(\"Restart\");\n        restart.addActionListener(controller);\n\n        //Undo button\n        undo = new JButton(\"Undo\");\n        undo.addActionListener(controller);\n        undo.setEnabled(false);\n\n        //Undo button\n        redo = new JButton(\"Redo\");\n        redo.addActionListener(controller);\n        redo.setEnabled(false);\n        // Save button\n        saveButton = new JButton(\"Save\");\n        saveButton.addActionListener(controller);\n\n\n        /* GAME PANELS */\n\n        //North Panel\n        JLabel UNOFLIPLabel = new JLabel(new ImageIcon(getClass().getResource(\"UNO Flip Logo.png\")));\n        UNOFLIPLabel.setMaximumSize(new Dimension(5000, 100));\n        UNOFLIPLabel.setMinimumSize(new Dimension(5000, 100));\n        UNOFLIPLabel.setPreferredSize(new Dimension(5000, 100));\n        UNOFLIPLabel.setHorizontalAlignment(JLabel.CENTER);\n        northPanel.add(UNOFLIPLabel);\n        northPanel.setBackground(Color.lightGray);\n\n        //South Panel\n        southPanel.add(nextButton, FlowLayout.LEFT);\n        southPanel.add(AI_Button);\n        southPanel.setBackground(Color.GRAY);\n        southPanel.add(UNOButton);\n        southPanel.add(restart);\n        southPanel.add(undo);\n        southPanel.add(redo);\n        southPanel.add(saveButton);\n\n        //Center Panel\n        updateTopCard(model);\n        centerPanel.setBackground(Color.BLACK);\n        centerPanel.setBorder(raisedEtched);\n        centerPanel.setBorder(BorderFactory.createEmptyBorder(50,50,50,50));\n        centerPanel.setSize(new Dimension(500, 500));\n\n        //East Panel\n        printAllPlayersInfo(model.getPlayers(), model);\n        eastPanel.setBorder(raisedEtched);\n        eastPanel.setBackground(Color.lightGray);\n\n        //West Panel\n        currentPlayerInfo.setBackground(Color.WHITE);\n        currentPlayerInfo.setBorder(raisedEtched);\n        JPanel cardPickedFromMarket = new JPanel();\n        cardPickedFromMarket.setLayout(new BoxLayout(cardPickedFromMarket, BoxLayout.PAGE_AXIS));\n        westPanel.setBackground(Color.lightGray);\n        cardPickedFromMarket.add(drawButton);\n        westPanel.add(cardPickedFromMarket, BorderLayout.SOUTH);\n        westPanel.add(currentPlayerInfo, BorderLayout.NORTH);\n\n        this.add(northPanel, BorderLayout.NORTH);\n        this.add(centerPanel, BorderLayout.CENTER);\n        this.add(eastPanel, BorderLayout.EAST);\n        this.add(westPanel, BorderLayout.WEST);\n        this.add(southPanel, BorderLayout.SOUTH);\n    }\n\n    public JButton getUndo(){\n        return this.undo;\n    }\n\n    public JButton getRedo(){\n        return this.redo;\n    }\n\n    /**\n     * A method to create the card\n     * @param card, the card to create\n     * @return the array of dark side, light side\n     */\n    private JPanel[] createCard(Card card) {\n        JPanel[] cardArray = new JPanel[2];\n        JPanel lightPanel = makeCardSide(\"dark\", card);\n        lightPanel.setSize(500,500);\n        JPanel darkPanel = makeCardSide(\"light\", card);\n        darkPanel.setSize(50,50);\n        cardArray[0] = lightPanel;\n        cardArray[1] = darkPanel;\n        return cardArray;\n    }\n\n    /**\n     * A method to create a side of a card (i.e. dark side or light side)\n     * @param mode dark mode or light mode?\n     * @param card the card to evaluate\n     * @return the equivalent card side\n     */\n    private JPanel makeCardSide(String mode, Card card) {\n        JPanel panel = new JPanel(new BorderLayout());\n        JButton button = new JButton();\n        button.setActionCommand(\"card\");\n        button.addActionListener(controller);\n\n        Border blackLine = BorderFactory.createLineBorder(Color.black);\n        panel.setBorder(blackLine);\n        JLabel topRight = new JLabel();\n        JLabel center = new JLabel();\n        String cardLightCharacteristics = card.getLightCharacteristics().split(\" \")[0];;\n        String cardLightColor = card.getLightCharacteristics().split(\" \")[1];\n        String cardDarkCharacteristics = card.getDarkCharacteristics().split(\" \")[0];\n        String cardDarkColor = card.getDarkCharacteristics().split(\" \")[1];\n\n        if (mode.equals(\"light\")) {\n            if (card.getType().equals(Card.type.REGULAR)) {\n                topRight.setText(cardLightCharacteristics);\n\n                button.setText(cardLightCharacteristics + \" \" + cardLightColor);\n                Color color = getColorEquivalence(cardLightColor);\n                panel.setBackground(color);\n                panel.add(topRight, BorderLayout.NORTH);\n                panel.add(button, BorderLayout.EAST);\n            }\n            else if (card.getType().equals(Card.type.SPECIAL)) {\n                if (cardLightCharacteristics.equals(\"WILD\")) {\n                    button.setText(cardLightCharacteristics);\n                    if (!cardLightColor.isEmpty()) {\n                        Color color = getColorEquivalence(cardLightColor);\n                        panel.setBackground(color);\n                    }\n                    panel.add(topRight, BorderLayout.NORTH);\n                    panel.add(button, BorderLayout.EAST);\n                }\n                else {\n                    //other card types\n                    button.setText(cardLightCharacteristics  + \" \" + cardLightColor);\n                    Color color = getColorEquivalence(cardLightColor);\n                    panel.setBackground(color);\n                    panel.add(topRight, BorderLayout.NORTH);\n                    panel.add(button, BorderLayout.EAST);\n                }\n            }\n        }\n        else if (mode.equals(\"dark\")) {\n            if (card.getType().equals(Card.type.REGULAR)) {\n                topRight.setText(cardDarkCharacteristics);\n                center.setText(cardDarkCharacteristics);\n\n                button.setText(cardDarkCharacteristics  + \" \" + cardDarkColor);\n                Color color = getColorEquivalence(cardDarkColor);\n                panel.setBackground(color);\n                panel.add(topRight, BorderLayout.NORTH);\n                panel.add(button, BorderLayout.EAST);\n            }\n            else if (card.getType().equals(Card.type.SPECIAL)) {\n                if (cardDarkCharacteristics.equals(\"WILD\")) {\n                    //if card characteristics is 'WILD'\n                    button.setText(cardDarkCharacteristics);\n                    if (!cardLightColor.isEmpty()) {\n                        Color color = getColorEquivalence(cardDarkColor);\n                        panel.setBackground(color);\n                    }\n                    panel.add(topRight, BorderLayout.NORTH);\n                    panel.add(button, BorderLayout.EAST);\n                }\n                else {\n                    //other card types\n                    button.setText(cardDarkCharacteristics  + \" \" + cardDarkColor);\n                    Color color = getColorEquivalence(cardDarkColor);\n                    panel.setBackground(color);\n                    panel.add(topRight, BorderLayout.NORTH);\n                    panel.add(button, BorderLayout.EAST);\n                }\n            }\n        }\n        return panel;\n    }\n\n    /**\n     * A method to get the color from the 'Color' class based on the colors from LIGHTCOLORS of DARKCOLORS from the Colors class\n     * @param cardColor, the LIGHTCOLOR or DARKCOLOR\n     * @return the Color equivalent\n     */\n    private Color getColorEquivalence(String cardColor) {\n        switch(cardColor.toUpperCase()) {\n            case \"BLUE\":\n                return Color.blue;\n            case \"GREEN\":\n                return Color.green;\n            case \"YELLOW\":\n                return Color.yellow;\n            case \"RED\":\n                return Color.red;\n            case \"PINK\":\n                return Color.pink;\n            case \"TEAL\":\n                return new Color(0,128,128);\n            case \"PURPLE\":\n                return new Color(128, 0, 128);\n            case \"ORANGE\":\n                return Color.orange;\n            default:\n                return Color.white;\n        }\n    }\n\n    /**\n     * Method to update the top card when a new card is played.\n     * @param model\n     */\n    private void updateTopCard(UNOModel model) {\n        centerPanel.removeAll();\n        JPanel topCard;\n        if (model.getCurrentMode().equals(UNOModel.mode.LIGHT)) {\n            topCard = createCard(model.getTopCard())[1];\n        }\n        else {\n            topCard = createCard(model.getTopCard())[0];\n        }\n        centerPanel.add(topCard);\n    }\n\n    /**\n     * Method to update the current player's info.\n     * @param player\n     */\n    private void updateCurrentPlayerInfo(Player player) {\n        currentPlayerInfo.setText(\"<html>Current Mode: \" + model.getCurrentMode()+ \"<br/><hr><br/>Current Player: \" +\n                player.getName() + \"<br/>Score: \" + model.getScores().get(player) + \"</html>\");\n    }\n\n    /**\n     * Method the print all the players' info for the score board.\n     * @param players\n     * @param model\n     */\n    private void printAllPlayersInfo(ArrayList<Player> players, UNOModel model) {\n        eastPanel.removeAll();\n        JPanel jPanel = new JPanel();\n        jPanel.setLayout(new BoxLayout(jPanel, BoxLayout.PAGE_AXIS));\n        JLabel label = new JLabel(\"Players and Scores: \");\n        jPanel.add(label);\n        for (Player p : players) {\n            JLabel playerInfo = new JLabel(p.getName() + \" -> \" + model.getScores().get(p));\n            jPanel.add(playerInfo);\n        }\n        eastPanel.add(jPanel, BorderLayout.NORTH);\n    }\n\n    /**\n     * Method to update the players card deck after specific action(s).\n     * @param currentPlayer\n     */\n    public void updateCurrentPlayerCards(Player currentPlayer, UNOModel unoModel) {\n        cardsPanel.removeAll();\n        if (unoModel.getCurrentMode().equals(UNOModel.mode.LIGHT)) {\n            for (Card card : currentPlayer.getCards()) {\n                cardsPanel.add(createCard(card)[1]);\n            }\n        }\n        else {\n            for (Card card : currentPlayer.getCards()) {\n                cardsPanel.add(createCard(card)[0]);\n            }\n        }\n    }\n\n    @Override\n    public void handleWildCard(UNOModel unoModel) {\n        String wildColor = \"\";\n        if (unoModel.getCurrentMode().equals(UNOModel.mode.LIGHT)) {\n            wildColor = JOptionPane.showInputDialog(\"Choose a color (RED, GREEN, BLUE, YELLOW): \").toUpperCase();\n            while (!Arrays.toString(Colors.LIGHTCOLORS.values()).contains(wildColor)) {\n                wildColor = JOptionPane.showInputDialog(\"Color must be one of these (RED, GREEN, BLUE, YELLOW): \").toUpperCase();\n            }\n            unoModel.getTopCard().setLightColor(Colors.LIGHTCOLORS.valueOf(wildColor));\n        }\n        else if (unoModel.getCurrentMode().equals(UNOModel.mode.DARK)) {\n            wildColor = JOptionPane.showInputDialog(\"Choose a color (PINK, TEAL, PURPLE, ORANGE): \").toUpperCase();\n            while (!Arrays.toString(Colors.DARKCOLORS.values()).contains(wildColor)) {\n                wildColor = JOptionPane.showInputDialog(\"Color must be one of these (PINK, TEAL, PURPLE, ORANGE): \").toUpperCase();\n            }\n            unoModel.getTopCard().setDarkColor(Colors.DARKCOLORS.valueOf(wildColor));\n        }\n        centerPanel.updateUI();\n        updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n        updateCurrentPlayerInfo(unoModel.getCurrentPlayer());\n        updateTopCard(unoModel);\n        for (Component component : cardsPanel.getComponents()) {\n            JPanel panel = (JPanel) component;\n            panel.getComponents()[1].setEnabled(false);\n        }\n        if (!unoModel.isWinner()) {\n            centerPanel.updateUI();\n            southPanel.updateUI();\n            nextButton.setEnabled(true);\n            drawButton.setEnabled(false);\n        }\n        else {\n            JLabel winner = new JLabel(unoModel.getCurrentPlayer() + \" has won the game! Reload game to play again\");\n            eastPanel.add(winner);\n            eastPanel.updateUI();\n        }\n    }\n\n    @Override\n    public void handleAITurn(UNOEvent e) {\n        updateCurrentPlayerCards(e.getModel().getCurrentPlayer(), e.getModel());\n        updateCurrentPlayerInfo(e.getModel().getCurrentPlayer());\n        updateTopCard(e.getModel());\n        this.AI_Button.setEnabled(false);\n        for (Component component : cardsPanel.getComponents()) {\n            JPanel panel = (JPanel) component;\n            panel.getComponents()[1].setEnabled(false);\n        }\n        southPanel.updateUI();\n        nextButton.setEnabled(true);\n        drawButton.setEnabled(false);\n        westPanel.updateUI();\n        southPanel.updateUI();\n\n        if (e.getModel().isWinner()) {\n            JLabel winner = new JLabel(e.getModel().getCurrentPlayer().getName() +\n                    \" has won the game! Reload game to play again\");\n            eastPanel.add(winner);\n            eastPanel.updateUI();\n            nextButton.setEnabled(false);\n            drawButton.setEnabled(false);\n            saveButton.setEnabled(false);\n            southPanel.updateUI();\n        }\n    }\n\n    @Override\n    public void handleRestart(UNOModel model) {\n        this.centerPanel.removeAll();\n        this.centerPanel.updateUI();\n        updateCurrentPlayerCards(model.getCurrentPlayer(), model);\n        updateCurrentPlayerInfo(model.getCurrentPlayer());\n        updateTopCard(model);\n        printAllPlayersInfo(model.getPlayers(), model);\n        nextButton.setEnabled(false);\n        drawButton.setEnabled(true);\n        undo.setEnabled(false);\n        redo.setEnabled(false);\n        AI_Button.setVisible(false);\n    }\n\n    @Override\n    public void handleUndo(UNOModel unoModel) {\n        updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n        updateCurrentPlayerInfo(unoModel.getCurrentPlayer());\n        updateTopCard(unoModel);\n//        this.AI_Button.setEnabled(false);\n        for (Component component : cardsPanel.getComponents()) {\n            JPanel panel = (JPanel) component;\n            panel.getComponents()[1].setEnabled(true);\n        }\n        redo.setEnabled(true);\n        undo.setEnabled(false);\n        southPanel.updateUI();\n        nextButton.setEnabled(false);\n        drawButton.setEnabled(true);\n        westPanel.updateUI();\n        southPanel.updateUI();\n    }\n\n    @Override\n    public void handleRedo(UNOModel unoModel) {\n        updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n        updateCurrentPlayerInfo(unoModel.getCurrentPlayer());\n        updateTopCard(unoModel);\n//        this.AI_Button.setEnabled(false);\n        for (Component component : cardsPanel.getComponents()) {\n            JPanel panel = (JPanel) component;\n            panel.getComponents()[1].setEnabled(false);\n        }\n        redo.setEnabled(false);\n        undo.setEnabled(true);\n        southPanel.updateUI();\n        nextButton.setEnabled(true);\n        drawButton.setEnabled(false);\n        westPanel.updateUI();\n        southPanel.updateUI();\n    }\n\n    @Override\n    public void handleSaveGame() {\n        JLabel saveMessage = new JLabel(\"Save successful\");\n        eastPanel.add(saveMessage);\n        eastPanel.updateUI();\n    }\n\n    @Override\n    public void handleNextPlayer(UNOModel unoModel) {\n        undo.setEnabled(false);\n        redo.setEnabled(false);\n//        restart.setEnabled(true);\n        if (unoModel.getCurrentPlayer() instanceof AI) {\n            updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n            updateCurrentPlayerInfo(unoModel.getCurrentPlayer());\n            printAllPlayersInfo(unoModel.getPlayers(), unoModel);\n            for (Component component : cardsPanel.getComponents()) {\n                JPanel panel = (JPanel) component;\n                panel.getComponents()[1].setEnabled(false);\n            }\n            AI_Button.setVisible(true);\n            AI_Button.setEnabled(true);\n            nextButton.setEnabled(false);\n            drawButton.setEnabled(false);\n            southPanel.updateUI();\n            westPanel.updateUI();\n        }\n        else {\n            AI_Button.setVisible(false);\n            updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n            updateCurrentPlayerInfo(unoModel.getCurrentPlayer());\n            printAllPlayersInfo(unoModel.getPlayers(), unoModel);\n            nextButton.setEnabled(false);\n            drawButton.setEnabled(true);\n            westPanel.updateUI();\n            eastPanel.updateUI();\n            southPanel.updateUI();\n        }\n        if (unoModel.isWinner()) {\n            JLabel winner = new JLabel(unoModel.getCurrentPlayer().getName() +\n                    \" has won the game! Reload game to play again\");\n            eastPanel.add(winner);\n            eastPanel.updateUI();\n            nextButton.setEnabled(false);\n            drawButton.setEnabled(false);\n            southPanel.updateUI();\n        }\n    }\n\n    @Override\n    public void handleDrawCard(UNOModel unoModel) {\n        updateCurrentPlayerCards(unoModel.getCurrentPlayer(), unoModel);\n        for (Component component : cardsPanel.getComponents()) {\n            component.getComponentAt(new Point(0,0)).setEnabled(false);\n        }\n\n        undo.setEnabled(true);\n        redo.setEnabled(false);\n        nextButton.setEnabled(true);\n        drawButton.setEnabled(false);\n        southPanel.updateUI();\n    }\n\n    @Override\n    public void handlePlacement(UNOEvent e) {\n        UNOButton.setEnabled(false);\n        southPanel.updateUI();\n        if (!e.isValid()) {\n            JLabel errorPanel = new JLabel(\"Invalid move, pick another card\");\n            eastPanel.add(errorPanel, BorderLayout.CENTER);\n            eastPanel.updateUI();\n        }\n        else {\n            undo.setEnabled(true);\n            updateCurrentPlayerCards(e.getModel().getCurrentPlayer(), e.getModel());\n            updateCurrentPlayerInfo(e.getModel().getCurrentPlayer());\n            updateTopCard(e.getModel());\n            for (Component component : cardsPanel.getComponents()) {\n                JPanel panel = (JPanel) component;\n                panel.getComponents()[1].setEnabled(false);\n            }\n            System.out.println(e.getModel().getTopCard().getLightCharacteristics());\n            southPanel.updateUI();\n            nextButton.setEnabled(true);\n            drawButton.setEnabled(false);\n\n            // A condition to enable the UNO button when the player has only one card left\n            if (e.getModel().getCurrentPlayer().getCards().size() == 1) {\n                UNOButton.setEnabled(true);\n                UNOButton.setBackground(Color.GREEN); // Change the button color to green when enabled\n            }\n\n            if (e.getModel().isWinner()) {\n                JLabel winner = new JLabel(e.getModel().getCurrentPlayer().getName() +\n                        \" has won the game! Reload game to play again\");\n                eastPanel.add(winner);\n                eastPanel.updateUI();\n                nextButton.setEnabled(false);\n                drawButton.setEnabled(false);\n                southPanel.updateUI();\n            }\n        }\n    }\n\n    public void handleUNO() {\n        JLabel errorPanel = new JLabel(model.getCurrentPlayer().getName() + \" called UNO!\");\n        eastPanel.add(errorPanel, BorderLayout.CENTER);\n        eastPanel.updateUI();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/UNOFrame.java b/src/UNOFrame.java
--- a/src/UNOFrame.java	(revision ca326e546d62adf1b6eb381315aa1ee78378e2c8)
+++ b/src/UNOFrame.java	(date 1701926232494)
@@ -2,6 +2,7 @@
 import javax.swing.border.Border;
 import javax.swing.border.EtchedBorder;
 import java.awt.*;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 
